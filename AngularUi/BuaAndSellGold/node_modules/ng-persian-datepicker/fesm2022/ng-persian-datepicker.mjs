import { Jalali } from 'jalali-ts';
import * as i0 from '@angular/core';
import { Directive, HostListener, Pipe, EventEmitter, Component, ContentChild, Input, Output, NgModule } from '@angular/core';
import { FormControlDirective, FormControlName } from '@angular/forms';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

const defaultTheme = {
    border: '#CCCCCC',
    timeBorder: '#CCCCCC',
    background: '#FFFFFF',
    text: '#333333',
    hoverBackground: '#007BE6',
    hoverText: '#FFFFFF',
    disabledBackground: '#F1F1F1',
    disabledText: '#CCCCCC',
    selectedBackground: '#005299',
    selectedText: '#FFFFFF',
    todayBackground: '#333333',
    todayText: '#FFFFFF',
    otherMonthBackground: 'rgba(0, 0, 0, 0)',
    otherMonthText: '#CCCCCC'
};

const faWeekDays = ['ش', 'ی', 'د', 'س', 'چ', 'پ', 'ج'];
const enWeekDays = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
const faMonths = [
    'فروردین',
    'اردیبهشت',
    'خرداد',
    'تیر',
    'مرداد',
    'شهریور',
    'مهر',
    'آبان',
    'آذر',
    'دی',
    'بهمن',
    'اسفند',
];
const enMonths = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
];

class ThemeHoverDirective {
    elementRef;
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    onMouseOver() {
        this.elementRef.nativeElement?.classList?.add('hover');
    }
    onMouseOut() {
        this.elementRef.nativeElement?.classList?.remove('hover');
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: ThemeHoverDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.0.0", type: ThemeHoverDirective, isStandalone: false, selector: "[themeHover]", host: { listeners: { "mouseover": "onMouseOver()", "mouseout": "onMouseOut()" } }, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: ThemeHoverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[themeHover]',
                    standalone: false,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { onMouseOver: [{
                type: HostListener,
                args: ['mouseover']
            }], onMouseOut: [{
                type: HostListener,
                args: ['mouseout']
            }] } });

class MonthPipe {
    transform(index, gregorian) {
        return gregorian ? enMonths[index] : faMonths[index];
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: MonthPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "19.0.0", ngImport: i0, type: MonthPipe, isStandalone: false, name: "month" });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: MonthPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'month',
                    standalone: false,
                }]
        }] });

class NgPersianDatepickerComponent {
    elementRef;
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.setToday();
    }
    input;
    inputEventFocusListener;
    formControl;
    formControlValueChanges;
    dateValue;
    lastEmittedDateValue;
    preventClose = false;
    uiYearView = true;
    uiMonthView = true;
    today;
    viewDate;
    selectedDate;
    wasInsideClick = false;
    viewDateTitle = '';
    viewModes = [];
    viewModeIndex = 0;
    weekDays = faWeekDays;
    years = [];
    months = [];
    days = [];
    hour = 0;
    minute = 0;
    second = 0;
    /** @ReactiveForm */
    set _formControlDirective(value) {
        this.setFormControl(value?.control);
    }
    set _formControlName(value) {
        this.setFormControl(value?.control);
    }
    /** @Input */
    // calendar
    calendarIsGregorian = false;
    set _calendarIsGregorian(value) {
        this.weekDays = value ? enWeekDays : faWeekDays;
        this.calendarIsGregorian = value;
    }
    // date
    inputDateValue;
    dateInitValue = true;
    dateIsGregorian = false;
    dateFormat = 'YYYY/MM/DD';
    set _dateFormat(value) {
        this.dateFormat = value.replace(new RegExp('j', 'g'), '');
    }
    dateGregorianFormat = 'YYYY-MM-DD';
    dateMin = null;
    set _dateMin(value) {
        this.dateMin = value;
        if (this.days.length)
            this.setViewDate();
    }
    dateMax = null;
    set _dateMax(value) {
        this.dateMax = value;
        if (this.days.length)
            this.setViewDate();
    }
    // time
    timeEnable = false;
    set _timeEnable(value) {
        this.timeEnable = value;
        if (!this.timeEnable && this.dateValueDefined())
            this.onChangeSelectedDate(true);
        this.setTime();
    }
    timeShowSecond = false;
    set _timeShowSecond(value) {
        this.timeShowSecond = value;
    }
    timeMeridian = false;
    set _timeMeridian(value) {
        this.timeMeridian = value;
    }
    // ui
    uiTheme = defaultTheme;
    set _uiTheme(value) {
        this.uiTheme = { ...defaultTheme, ...value };
    }
    uiIsVisible = false;
    uiHideOnOutsideClick = true;
    uiHideAfterSelectDate = true;
    set _uiYearView(value) {
        this.uiYearView = value;
        this.checkViewModes();
        this.setViewDateTitle();
    }
    set _uiMonthView(value) {
        this.uiMonthView = value;
        this.checkViewModes();
        this.setViewDateTitle();
    }
    uiInitViewMode = 'day';
    uiTodayBtnEnable = true;
    /** @Output */
    // date
    dateOnInit = new EventEmitter();
    dateOnSelect = new EventEmitter();
    // ui
    uiIsVisibleChange = new EventEmitter();
    ngOnInit() {
        this.setViewModes();
        this.setInitViewMode();
        this.setShowOnInputFocus();
        if (this.inputDateValue)
            this.setFormControl(this.inputDateValue);
    }
    ngOnDestroy() {
        this.formControlValueChanges?.unsubscribe();
        if (this.input) {
            this.input.removeEventListener('focus', this.inputEventFocusListener);
        }
    }
    dateValueDefined() {
        return typeof this.dateValue === 'number';
    }
    setFormControl(value) {
        if (!value)
            return;
        this.formControl = value;
        if (!this.dateValueDefined()) {
            this.setDateInitValue(this.formControl?.value);
            this.setSelectedDate(this.formControl?.value);
            this.setViewDate();
            this.setTime();
            this.setFormControlValue();
        }
        this.formControlValueChanges?.unsubscribe();
        this.formControlValueChanges = this.formControl
            ?.valueChanges
            ?.subscribe({
            next: (value) => {
                if ((typeof value === 'string' && !value.trim() || (typeof value === 'number' && Number.isNaN(value)) || value === null || value === undefined)) {
                    this.dateValue = undefined;
                    this.lastEmittedDateValue = undefined;
                    this.selectedDate = undefined;
                    this.setViewDate();
                    return;
                }
                let valueOf = undefined;
                try {
                    valueOf = this.valueOfDate(value);
                }
                catch (e) {
                    return;
                }
                if (typeof valueOf === 'undefined' || valueOf === this.dateValue) {
                    return;
                }
                const date = Jalali.timestamp(valueOf, false);
                if (!this.isDateInRange(date.valueOf(), false, false)) {
                    return;
                }
                this.setTime(date);
                this.changeSelectedDate(date, false);
            }
        });
    }
    setToday() {
        const today = Jalali.now(false);
        if (!this.timeEnable)
            today.startOf('day');
        this.today = today;
    }
    setViewModes() {
        this.viewModes = ['day'];
        if (this.uiMonthView) {
            this.viewModes.push('month');
        }
        if (this.uiYearView) {
            this.viewModes.push('year');
        }
        if (this.viewModes.length <= this.viewModeIndex) {
            this.viewModeIndex = 0;
        }
    }
    setInitViewMode() {
        const index = this.viewModes.indexOf(this.uiInitViewMode);
        if (index !== -1)
            this.viewModeIndex = index;
    }
    checkViewModes() {
        let viewModesCount = 1;
        if (this.uiYearView) {
            viewModesCount++;
        }
        if (this.uiMonthView) {
            viewModesCount++;
        }
        if (viewModesCount !== this.viewModes.length) {
            this.setViewModes();
        }
    }
    setDateInitValue(dateValue) {
        if (dateValue || !this.dateInitValue) {
            return;
        }
        this.dateValue = this.today.valueOf();
        this.selectedDate = Jalali.timestamp(this.dateValue, false);
        this.lastEmittedDateValue = +this.selectedDate;
        this.dateOnInit.next({
            shamsi: String(this.selectedDate.format(this.dateFormat)),
            gregorian: String(this.selectedDate.gregorian(this.dateGregorianFormat)),
            timestamp: Number(this.selectedDate.valueOf())
        });
    }
    setSelectedDate(dateValue) {
        if (!dateValue) {
            return;
        }
        const date = Jalali.timestamp(this.valueOfDate(dateValue), false);
        if (!this.timeEnable)
            date.startOf('day');
        this.dateValue = date.valueOf();
        this.selectedDate = date;
    }
    setViewDate() {
        if (!this.dateValueDefined()) {
            this.viewDate = this.dateMax ? Jalali.timestamp(this.dateMax, false) : this.today.clone();
        }
        else {
            this.viewDate = this.dateMax && this.selectedDate.valueOf() > this.dateMax.valueOf() ?
                Jalali.timestamp(this.dateMax, false) : this.selectedDate.clone();
        }
        if (!this.timeEnable)
            this.viewDate.startOf('day');
        this.onChangeViewDate();
    }
    onChangeViewDate() {
        if (this.calendarIsGregorian) {
            this.viewDate.date.setDate(1);
        }
        else {
            this.viewDate.startOf('month');
        }
        this.setYears();
        this.setMonths();
        this.setDays();
        this.setViewDateTitle();
    }
    setYears() {
        this.years = [];
        const clone = this.viewDate.clone();
        const years = this.calendarIsGregorian ? clone.date : clone;
        if (years instanceof Date) {
            years.setDate(1);
            years.setMonth(0);
            years.setFullYear(years.getFullYear() - 6);
        }
        else {
            years.startOf('year');
            years.add(-6, 'year');
        }
        for (let i = 0; i < 12; i++) {
            const year = [+years, years.getFullYear()];
            this.years.push({
                timestamp: year[0],
                value: year[1],
                isYearOfTodayDate: this.isYearOfTodayDate(year),
                isYearOfSelectedDate: this.isYearOfSelectedDate(year),
                isYearDisabled: this.isYearDisabled(year)
            });
            if (years instanceof Date) {
                years.setFullYear(years.getFullYear() + 1);
            }
            else {
                years.add(1, 'year');
            }
        }
    }
    setMonths() {
        this.months = [];
        const clone = this.viewDate.clone();
        const months = this.calendarIsGregorian ? clone.date : clone;
        if (months instanceof Date) {
            months.setDate(1);
            months.setMonth(0);
        }
        else {
            months.startOf('year');
        }
        for (let i = 0; i < 12; i++) {
            const month = [+months, months.getFullYear(), months.getMonth()];
            this.months.push({
                timestamp: month[0],
                year: month[1],
                indexValue: month[2],
                isMonthOfTodayDate: this.isMonthOfToday(month),
                isMonthOfSelectedDate: this.isMonthOfSelectedDate(month),
                isMonthDisabled: this.isMonthDisabled(month)
            });
            if (months instanceof Date) {
                months.setMonth(months.getMonth() + 1);
            }
            else {
                months.add(1, 'month');
            }
        }
    }
    setDays() {
        this.days = [];
        const prevMonthDetails = [];
        const currentMonthDetails = [];
        const nextMonthDetails = [];
        const prevMonth = Jalali.timestamp(+this.viewDate, false);
        const currentMonth = Jalali.timestamp(+this.viewDate, false);
        const nextMonth = Jalali.timestamp(+this.viewDate, false);
        if (this.calendarIsGregorian) {
            prevMonth.date.setMonth(prevMonth.date.getMonth() - 1);
            nextMonth.date.setMonth(nextMonth.date.getMonth() + 1);
        }
        else {
            prevMonth.add(-1, 'month');
            nextMonth.add(1, 'month');
        }
        const gregorianMonthDays = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
        const currentMonthDays = this.calendarIsGregorian ? gregorianMonthDays(currentMonth.date) : currentMonth.monthLength();
        const prevMonthDays = this.calendarIsGregorian ? gregorianMonthDays(prevMonth.date) : prevMonth.monthLength();
        const nextMonthDays = this.calendarIsGregorian ? gregorianMonthDays(nextMonth.date) : nextMonth.monthLength();
        for (let i = 0; i < prevMonthDays; i++) {
            if (this.calendarIsGregorian) {
                prevMonthDetails.push([+prevMonth.date, prevMonth.date.getFullYear(), prevMonth.date.getMonth(), prevMonth.date.getDate()]);
            }
            else {
                prevMonthDetails.push([+prevMonth, prevMonth.getFullYear(), prevMonth.getMonth(), prevMonth.getDate()]);
            }
            prevMonth.add(1, 'day');
        }
        for (let i = 0; i < currentMonthDays; i++) {
            if (this.calendarIsGregorian) {
                currentMonthDetails.push([+currentMonth, currentMonth.date.getFullYear(), currentMonth.date.getMonth(), currentMonth.date.getDate()]);
            }
            else {
                currentMonthDetails.push([+currentMonth, currentMonth.getFullYear(), currentMonth.getMonth(), currentMonth.getDate()]);
            }
            currentMonth.add(1, 'day');
        }
        for (let i = 0; i < nextMonthDays; i++) {
            if (this.calendarIsGregorian) {
                nextMonthDetails.push([+nextMonth, nextMonth.date.getFullYear(), nextMonth.date.getMonth(), nextMonth.date.getDate()]);
            }
            else {
                nextMonthDetails.push([+nextMonth, nextMonth.getFullYear(), nextMonth.getMonth(), nextMonth.getDate()]);
            }
            nextMonth.add(1, 'day');
        }
        for (let row = 0; row < 6; row++) {
            const rowValue = [];
            for (let col = 0; col < 7; col++) {
                const fromPrevMonth = this.calendarIsGregorian ?
                    this.viewDate.date.getDay() :
                    (this.viewDate.date.getDay() === 6) ? 0 : (this.viewDate.date.getDay() + 1);
                let index = ((row * 7) + col) - fromPrevMonth;
                let day = [];
                if (index < 0) {
                    index = prevMonthDetails.length - (fromPrevMonth - col);
                    day = prevMonthDetails[index];
                }
                else if (index >= currentMonthDetails.length) {
                    index = index - currentMonthDetails.length;
                    day = nextMonthDetails[index];
                }
                else {
                    day = currentMonthDetails[index];
                }
                rowValue.push({
                    timestamp: day[0],
                    year: day[1],
                    monthIndex: day[2],
                    value: day[3],
                    isDayInCurrentMonth: this.isDayInCurrentMonth(day),
                    isDayOfTodayDate: this.isDayOfTodayDate(day),
                    isDayOfSelectedDate: this.isDayOfSelectedDate(day),
                    isDayDisabled: this.isDayDisabled(day)
                });
            }
            this.days.push(rowValue);
        }
    }
    setViewDateTitle() {
        if (!this.viewDate) {
            return;
        }
        const date = this.calendarIsGregorian ? this.viewDate.date : this.viewDate;
        const year = date.getFullYear();
        switch (this.viewModes[this.viewModeIndex]) {
            case 'day':
                this.viewDateTitle = `${this.calendarIsGregorian ? enMonths[date.getMonth()] : faMonths[date.getMonth()]} ${year}`;
                break;
            case 'month':
                this.viewDateTitle = year.toString();
                break;
            case 'year':
                this.viewDateTitle = (year - 6).toString() + '-' + (year + 5).toString();
                break;
        }
    }
    setTime(date = null) {
        if (date) {
            this.hour = date.getHours();
            this.minute = date.getMinutes();
            this.second = date.getSeconds();
        }
        else if (this.selectedDate) {
            this.hour = this.selectedDate.getHours();
            this.minute = this.selectedDate.getMinutes();
            this.second = this.selectedDate.getSeconds();
        }
        else {
            this.hour = this.today.getHours();
            this.minute = this.today.getMinutes();
            this.second = this.today.getSeconds();
        }
    }
    setFormControlValue() {
        if (!this.formControl) {
            return;
        }
        if (this.dateValueDefined()) {
            this.formControl?.setValue(Jalali.timestamp(this.dateValue, false).format(this.dateFormat, this.calendarIsGregorian));
        }
    }
    setShowOnInputFocus() {
        const input = this.elementRef.nativeElement?.querySelector('input');
        if (!input) {
            return;
        }
        this.inputEventFocusListener = () => {
            if (!this.uiIsVisible) {
                this.setUiIsVisible(true);
            }
        };
        this.input = input;
        this.input.addEventListener('focus', this.inputEventFocusListener);
    }
    skipViewDate(skip, type) {
        if (type === 1) {
            this.calendarIsGregorian ?
                this.viewDate.date.setFullYear(this.viewDate.date.getFullYear() + skip) :
                this.viewDate.add(skip, 'year');
        }
        else if (type === 2) {
            this.calendarIsGregorian ?
                this.viewDate.date.setMonth(this.viewDate.date.getMonth() + skip) :
                this.viewDate.add(skip, 'month');
        }
    }
    navigate(forward) {
        let skip = 1;
        if (!forward) {
            skip = skip * -1;
        }
        switch (this.viewModes[this.viewModeIndex]) {
            case 'day':
                this.skipViewDate(skip, 2);
                break;
            case 'month':
                this.skipViewDate(skip, 1);
                break;
            case 'year':
                this.skipViewDate((skip * 12), 1);
                break;
        }
        this.onChangeViewDate();
    }
    nextViewMode() {
        if (this.viewModes.length === 1) {
            return;
        }
        if (this.viewModes.length <= (this.viewModeIndex + 1)) {
            this.viewModeIndex = 0;
        }
        else {
            this.viewModeIndex++;
        }
        this.setViewDateTitle();
    }
    selectToday() {
        this.setToday();
        this.preventClose = true;
        this.changeSelectedDate(this.today);
    }
    yearClick(year) {
        if (year.isYearDisabled) {
            return;
        }
        this.viewDate = Jalali.timestamp(year.timestamp, false);
        let viewModeIndex = this.viewModes.indexOf('month');
        if (viewModeIndex === -1) {
            viewModeIndex = this.viewModes.indexOf('day');
        }
        this.viewModeIndex = viewModeIndex;
        this.onChangeViewDate();
    }
    monthClick(month) {
        if (month.isMonthDisabled) {
            return;
        }
        this.viewDate = Jalali.timestamp(month.timestamp, false);
        this.viewModeIndex = this.viewModes.indexOf('day');
        this.onChangeViewDate();
    }
    dayClick(day) {
        if (day.isDayDisabled) {
            return;
        }
        this.changeSelectedDate(Jalali.timestamp(day.timestamp, false));
    }
    isYearOfTodayDate(year) {
        const date = this.calendarIsGregorian ? this.today.date : this.today;
        return (year[1] === date.getFullYear());
    }
    isYearOfSelectedDate(year) {
        if (!this.selectedDate) {
            return false;
        }
        const date = this.calendarIsGregorian ? this.selectedDate.date : this.selectedDate;
        return (year[1] === date.getFullYear());
    }
    isYearDisabled(month) {
        return !this.isDateInRange(month[0], true, false);
    }
    isMonthOfToday(month) {
        const date = this.calendarIsGregorian ? this.today.date : this.today;
        return (month[1] === date.getFullYear() &&
            month[2] === date.getMonth());
    }
    isMonthOfSelectedDate(month) {
        if (!this.selectedDate) {
            return false;
        }
        const date = this.calendarIsGregorian ? this.selectedDate.date : this.selectedDate;
        return (month[1] === date.getFullYear() &&
            month[2] === date.getMonth());
    }
    isMonthDisabled(month) {
        return !this.isDateInRange(month[0], false, true);
    }
    isDayInCurrentMonth(day) {
        const date = this.calendarIsGregorian ? this.viewDate.date : this.viewDate;
        return (day[1] === date.getFullYear() &&
            day[2] === date.getMonth());
    }
    isDayOfTodayDate(day) {
        const date = this.calendarIsGregorian ? this.today.date : this.today;
        return (day[1] === date.getFullYear() &&
            day[2] === date.getMonth() &&
            day[3] === date.getDate());
    }
    isDayOfSelectedDate(day) {
        if (!this.selectedDate) {
            return false;
        }
        const date = this.calendarIsGregorian ? this.selectedDate.date : this.selectedDate;
        return (day[1] === date.getFullYear() &&
            day[2] === date.getMonth() &&
            day[3] === date.getDate());
    }
    isDayDisabled(day) {
        return !this.isDateInRange(day[0], false, false);
    }
    isDateInRange(date, isYear, isMonth) {
        const result = [];
        if (this.dateMin) {
            const min = Jalali.timestamp(this.dateMin, false);
            if (isYear) {
                if (this.calendarIsGregorian) {
                    min.date.setDate(1);
                    min.date.setMonth(0);
                }
                else {
                    min.startOf('year');
                }
            }
            if (isMonth) {
                if (this.calendarIsGregorian) {
                    min.date.setDate(1);
                }
                else {
                    min.startOf('month');
                }
            }
            result.push(min.valueOf() <= date);
        }
        if (this.dateMax) {
            const max = Jalali.timestamp(this.dateMax, false);
            if (isYear) {
                if (this.calendarIsGregorian) {
                    max.date.setDate(1);
                    max.date.setMonth(0);
                }
                else {
                    max.startOf('year');
                }
            }
            if (isMonth) {
                if (this.calendarIsGregorian) {
                    max.date.setDate(1);
                }
                else {
                    max.startOf('month');
                }
            }
            result.push(max.valueOf() >= date);
        }
        return !(result.indexOf(false) !== -1);
    }
    changeSelectedDate(date, setInputValue = true) {
        this.selectedDate = date.clone();
        this.onChangeSelectedDate(setInputValue);
    }
    onChangeSelectedDate(setInputValue) {
        if (this.timeEnable) {
            this.selectedDate.setHours(this.hour);
            this.selectedDate.setMinutes(this.minute);
            this.selectedDate.setSeconds(this.second);
            this.selectedDate.setMilliseconds(0);
        }
        else {
            this.selectedDate.startOf('day');
        }
        this.dateValue = this.selectedDate.valueOf();
        if (this.uiHideAfterSelectDate && !this.preventClose) {
            this.setUiIsVisible(false);
        }
        else {
            this.preventClose = false;
        }
        if (this.lastEmittedDateValue === +this.selectedDate)
            return;
        if (setInputValue) {
            this.setFormControlValue();
        }
        this.setViewDate();
        this.lastEmittedDateValue = +this.selectedDate;
        this.dateOnSelect.next({
            shamsi: String(this.selectedDate.format(this.dateFormat)),
            gregorian: String(this.selectedDate.gregorian(this.dateGregorianFormat)),
            timestamp: Number(this.selectedDate.valueOf())
        });
    }
    set12Hour(value) {
        let hour = value;
        const isAM = this.hour < 12;
        const isPM = this.hour >= 12;
        if (isAM && hour === 12) {
            hour = 0;
        }
        if (isPM && hour === 12) {
            hour = 12;
        }
        if (isPM && hour < 12) {
            hour = value + 12;
        }
        this.setHour(hour);
    }
    setHour(value) {
        if (value === this.hour) {
            return;
        }
        this.hour = value;
        this.onTimeChange();
    }
    setMinute(value) {
        if (value === this.minute) {
            return;
        }
        this.minute = value;
        this.onTimeChange();
    }
    setSecond(value) {
        if (value === this.second) {
            return;
        }
        this.second = value;
        this.onTimeChange();
    }
    toggleAmPm(current) {
        if ((current === 'AM' && this.hour < 12) || (current === 'PM' && this.hour >= 12)) {
            return;
        }
        if (this.hour < 12) {
            this.hour += 12;
        }
        else {
            this.hour -= 12;
        }
        this.onTimeChange();
    }
    onTimeChange() {
        this.preventClose = true;
        if (!this.selectedDate)
            this.selectedDate = this.today.clone();
        this.changeSelectedDate(this.selectedDate);
    }
    onInsideClick() {
        this.wasInsideClick = true;
    }
    onOutsideClick() {
        const wasInsideClick = Boolean(this.wasInsideClick);
        this.wasInsideClick = false;
        if (wasInsideClick || !this.uiHideOnOutsideClick) {
            return;
        }
        this.setUiIsVisible(false);
    }
    valueOfDate(date) {
        if (typeof date === 'string') {
            const gregorian = (this.calendarIsGregorian || (this.dateIsGregorian && !this.dateValueDefined()));
            return gregorian ? +Jalali.gregorian(date, false) : +Jalali.parse(date, false);
        }
        return date;
    }
    setUiIsVisible(value) {
        this.uiIsVisible = value;
        this.uiIsVisibleChange.next(value);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgPersianDatepickerComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.0.0", type: NgPersianDatepickerComponent, isStandalone: false, selector: "ng-persian-datepicker", inputs: { _calendarIsGregorian: ["calendarIsGregorian", "_calendarIsGregorian"], inputDateValue: ["dateValue", "inputDateValue"], dateInitValue: "dateInitValue", dateIsGregorian: "dateIsGregorian", _dateFormat: ["dateFormat", "_dateFormat"], dateGregorianFormat: "dateGregorianFormat", _dateMin: ["dateMin", "_dateMin"], _dateMax: ["dateMax", "_dateMax"], _timeEnable: ["timeEnable", "_timeEnable"], _timeShowSecond: ["timeShowSecond", "_timeShowSecond"], _timeMeridian: ["timeMeridian", "_timeMeridian"], _uiTheme: ["uiTheme", "_uiTheme"], uiIsVisible: "uiIsVisible", uiHideOnOutsideClick: "uiHideOnOutsideClick", uiHideAfterSelectDate: "uiHideAfterSelectDate", _uiYearView: ["uiYearView", "_uiYearView"], _uiMonthView: ["uiMonthView", "_uiMonthView"], uiInitViewMode: "uiInitViewMode", uiTodayBtnEnable: "uiTodayBtnEnable" }, outputs: { dateOnInit: "dateOnInit", dateOnSelect: "dateOnSelect", uiIsVisibleChange: "uiIsVisibleChange" }, host: { listeners: { "click": "onInsideClick()", "document:click": "onOutsideClick()" } }, queries: [{ propertyName: "_formControlDirective", first: true, predicate: FormControlDirective, descendants: true }, { propertyName: "_formControlName", first: true, predicate: FormControlName, descendants: true }], ngImport: i0, template: "<div class=\"datepicker-content\">\n  <ng-content />\n  <div class=\"datepicker-outer-container\"\n       [dir]=\"calendarIsGregorian ? 'ltr' : 'rtl'\"\n       [style.background-color]=\"uiTheme.background\"\n       [style.color]=\"uiTheme.text\"\n       [style.border-color]=\"uiTheme.border\"\n       [class.hide]=\"!uiIsVisible\">\n    <div class=\"datepicker-inner-container\">\n\n      <!-- Start: navigation -->\n      <div class=\"content-container navigation-container horizontal-padding\">\n        <div class=\"go-back dp-btn\"\n             [style.background-color]=\"goBack.classList.contains('hover') ? uiTheme.hoverBackground : null\"\n             (click)=\"navigate(false)\" themeHover #goBack>\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n               viewBox=\"0 0 240.823 240.823\"\n               [style.fill]=\"goBack.classList.contains('hover') ? uiTheme.hoverText : uiTheme.text\">\n            <path d=\"M183.189,111.816L74.892,3.555c-4.752-4.74-12.451-4.74-17.215,0c-4.752,4.74-4.752,12.439,0,17.179\n                   l99.707,99.671l-99.695,99.671c-4.752,4.74-4.752,12.439,0,17.191c4.752,4.74,12.463,4.74,17.215,0l108.297-108.261\n                   C187.881,124.315,187.881,116.495,183.189,111.816z\"></path>\n          </svg>\n        </div>\n        <div class=\"switch-view dp-btn\"\n             [style.background-color]=\"switchView.classList.contains('hover') ? uiTheme.hoverBackground : null\"\n             [style.color]=\"switchView.classList.contains('hover') ? uiTheme.hoverText : null\"\n             (click)=\"nextViewMode()\" themeHover #switchView>\n          <span>{{ viewDateTitle }}</span>\n        </div>\n        <div class=\"go-forward dp-btn\"\n             [style.background-color]=\"goForward.classList.contains('hover') ? uiTheme.hoverBackground : null\"\n             (click)=\"navigate(true)\" themeHover #goForward>\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n               viewBox=\"0 0 240.823 240.823\"\n               [style.fill]=\"goForward.classList.contains('hover') ? uiTheme.hoverText : uiTheme.text\">\n            <path d=\"M57.633,129.007L165.93,237.268c4.752,4.74,12.451,4.74,17.215,0c4.752-4.74,4.752-12.439,0-17.179\n                   l-99.707-99.671l99.695-99.671c4.752-4.74,4.752-12.439,0-17.191c-4.752-4.74-12.463-4.74-17.215,0L57.621,111.816\n                   C52.942,116.507,52.942,124.327,57.633,129.007z\"></path>\n          </svg>\n        </div>\n      </div>\n      <!-- End: navigation -->\n\n      <!-- Start: year view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'year'\"\n           class=\"years-container horizontal-padding\">\n        <div class=\"content-container\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <div class=\"year-col three-col-per-row\"\n               (click)=\"yearClick(year)\"\n               *ngFor=\"let year of years\">\n            <div class=\"dp-btn\"\n                 [class.disabled]=\"year.isYearDisabled\"\n                 [class.selected]=\"year.isYearOfSelectedDate\"\n                 [class.today]=\"year.isYearOfTodayDate\"\n                 [style.background-color]=\"\n                   (year.isYearDisabled) ?\n                     uiTheme.disabledBackground :\n                     (year.isYearOfSelectedDate) ?\n                       uiTheme.selectedBackground :\n                       (yearCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         (year.isYearOfTodayDate) ?\n                           uiTheme.todayBackground :\n                           null\n                 \"\n                 [style.color]=\"\n                   (year.isYearDisabled) ?\n                     uiTheme.disabledText :\n                     (year.isYearOfSelectedDate) ?\n                       uiTheme.selectedText :\n                       (yearCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         (year.isYearOfTodayDate) ?\n                           uiTheme.todayText :\n                           null\n                 \"\n                 themeHover #yearCol>\n              <span>{{ year.value }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: year view mode -->\n\n      <!-- Start: month view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'month'\"\n           class=\"months-container horizontal-padding\">\n        <div class=\"content-container\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <div class=\"month-col three-col-per-row\"\n               (click)=\"monthClick(month)\"\n               *ngFor=\"let month of months\">\n            <div class=\"dp-btn\"\n                 [class.disabled]=\"month.isMonthDisabled\"\n                 [class.selected]=\"month.isMonthOfSelectedDate\"\n                 [class.today]=\"month.isMonthOfTodayDate\"\n                 [style.background-color]=\"\n                   (month.isMonthDisabled) ?\n                     uiTheme.disabledBackground :\n                     (month.isMonthOfSelectedDate) ?\n                       uiTheme.selectedBackground :\n                       (monthCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         (month.isMonthOfTodayDate) ?\n                           uiTheme.todayBackground :\n                           null\n                 \"\n                 [style.color]=\"\n                   (month.isMonthDisabled) ?\n                     uiTheme.disabledText :\n                     (month.isMonthOfSelectedDate) ?\n                       uiTheme.selectedText :\n                       (monthCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         (month.isMonthOfTodayDate) ?\n                           uiTheme.todayText :\n                           null\n                 \"\n                 themeHover #monthCol>\n              <span>{{ month.indexValue | month: calendarIsGregorian }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: month view mode -->\n\n      <!-- Start: day view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'day'\"\n           class=\"days-container horizontal-padding\">\n        <div class=\"content-container week-days\">\n          <div class=\"day-col\"\n               *ngFor=\"let weekDay of weekDays\">\n            <span>{{ weekDay }}</span>\n          </div>\n        </div>\n        <div class=\"content-container month-days\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <ng-container *ngFor=\"let row of days\">\n            <div class=\"day-col\"\n                 (click)=\"dayClick(day)\"\n                 *ngFor=\"let day of row\">\n              <div class=\"dp-btn\"\n                   [class.disabled]=\"day.isDayDisabled\"\n                   [class.selected]=\"day.isDayOfSelectedDate\"\n                   [class.today]=\"day.isDayOfTodayDate\"\n                   [class.other-month]=\"!day.isDayInCurrentMonth\"\n                   [style.background-color]=\"\n                     (day.isDayDisabled) ?\n                       uiTheme.disabledBackground :\n                       (day.isDayOfSelectedDate) ?\n                         uiTheme.selectedBackground :\n                         (dayCol.classList.contains('hover')) ?\n                           uiTheme.hoverBackground :\n                           (day.isDayOfTodayDate) ?\n                             uiTheme.todayBackground :\n                             (!day.isDayInCurrentMonth) ?\n                               uiTheme.otherMonthBackground :\n                               null\n                   \"\n                   [style.color]=\"\n                     (day.isDayDisabled) ?\n                       uiTheme.disabledText :\n                       (day.isDayOfSelectedDate) ?\n                         uiTheme.selectedText :\n                         (dayCol.classList.contains('hover')) ?\n                           uiTheme.hoverText :\n                           (day.isDayOfTodayDate) ?\n                             uiTheme.todayText :\n                             (!day.isDayInCurrentMonth) ?\n                               uiTheme.otherMonthText :\n                               null\n                   \"\n                   themeHover #dayCol>\n                <span>{{ day.value }}</span>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <!-- End: day view mode -->\n\n      <!-- Start: time picker -->\n      <ng-container *ngIf=\"timeEnable\">\n        <div class=\"time-container horizontal-padding content-container\"\n             [style.border-top-color]=\"uiTheme.timeBorder\"\n             [style.border-bottom-color]=\"uiTheme.timeBorder\">\n          <div class=\"time-col hour-col\">\n            <div class=\"item\"\n                 [style.border-bottom-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ hour }}</span>\n              </div>\n            </div>\n            <ng-container *ngIf=\"!timeMeridian\">\n              <div class=\"item\"\n                   *ngFor=\"let _ of [].constructor(24); let i = index\">\n                <div class=\"dp-btn\"\n                     (click)=\"setHour(i)\"\n                     [class.selected]=\"hour === i\"\n                     [style.background-color]=\"\n                       (hour === i) ?\n                         uiTheme.selectedBackground :\n                         (hourCol.classList.contains('hover')) ?\n                           uiTheme.hoverBackground :\n                           null\n                     \"\n                     [style.color]=\"\n                       (hour === i) ?\n                         uiTheme.selectedText :\n                         (hourCol.classList.contains('hover')) ?\n                           uiTheme.hoverText :\n                           null\n                     \" themeHover #hourCol>\n                  <span>{{ i | number: '2.0' }}</span>\n                </div>\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"timeMeridian\">\n              <div class=\"item\"\n                   *ngFor=\"let _ of [].constructor(12); let i = index\">\n                <div class=\"dp-btn\"\n                     (click)=\"set12Hour(i + 1)\"\n                     [class.selected]=\"\n                       (hour === 0 && (i + 1) === 12) ||\n                       (hour >= 1 && hour <= 12 && hour === (i + 1)) ||\n                       (hour > 12 && hour === ((i + 1) + 12))\n                     \"\n                     [style.background-color]=\"\n                       (\n                         (hour === 0 && (i + 1) === 12) ||\n                         (hour >= 1 && hour <= 12 && hour === (i + 1)) ||\n                         (hour > 12 && hour === ((i + 1) + 12))\n                       ) ?\n                         uiTheme.selectedBackground :\n                         (hour12Col.classList.contains('hover')) ?\n                           uiTheme.hoverBackground :\n                           null\n                     \"\n                     [style.color]=\"\n                       (\n                         (hour === 0 && (i + 1) === 12) ||\n                         (hour >= 1 && hour <= 12 && hour === (i + 1)) ||\n                         (hour > 12 && hour === ((i + 1) + 12))\n                       ) ?\n                         uiTheme.selectedText :\n                         (hour12Col.classList.contains('hover')) ?\n                           uiTheme.hoverText :\n                           null\n                     \" themeHover #hour12Col>\n                  <span>{{ (i + 1) | number: '2.0' }}</span>\n                </div>\n              </div>\n            </ng-container>\n            <div class=\"item\"\n                 [style.border-top-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ hour }}</span>\n              </div>\n            </div>\n          </div>\n          <div class=\"time-col minute-col\">\n            <div class=\"item\"\n                 [style.border-bottom-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ minute }}</span>\n              </div>\n            </div>\n            <div class=\"item\"\n                 *ngFor=\"let _ of [].constructor(60); let i = index\">\n              <div class=\"dp-btn\"\n                   (click)=\"setMinute(i)\"\n                   [class.selected]=\"minute === i\"\n                   [style.background-color]=\"\n                     (minute === i) ?\n                       uiTheme.selectedBackground :\n                       (minuteCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         null\n                   \"\n                   [style.color]=\"\n                     (minute === i) ?\n                       uiTheme.selectedText :\n                       (minuteCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         null\n                   \" themeHover #minuteCol>\n                <span>{{ i | number: '2.0' }}</span>\n              </div>\n            </div>\n            <div class=\"item\"\n                 [style.border-top-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ minute }}</span>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"timeShowSecond\"\n               class=\"time-col second-col\">\n            <div class=\"item\"\n                 [style.border-bottom-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ second }}</span>\n              </div>\n            </div>\n            <div class=\"item\"\n                 *ngFor=\"let _ of [].constructor(60); let i = index\">\n              <div class=\"dp-btn\"\n                   (click)=\"setSecond(i)\"\n                   [class.selected]=\"second === i\"\n                   [style.background-color]=\"\n                     (second === i) ?\n                       uiTheme.selectedBackground :\n                       (secondCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         null\n                   \"\n                   [style.color]=\"\n                     (second === i) ?\n                       uiTheme.selectedText :\n                       (secondCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         null\n                   \" themeHover #secondCol>\n                <span>{{ i | number: '2.0' }}</span>\n              </div>\n            </div>\n            <div class=\"item\"\n                 [style.border-top-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ second }}</span>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"timeMeridian\"\n               class=\"time-col meridian-col\">\n            <div class=\"item\">\n              <div class=\"dp-btn\"\n                   (click)=\"toggleAmPm('AM')\"\n                   [class.selected]=\"hour < 12\"\n                   [style.background-color]=\"\n                     (hour < 12) ?\n                       uiTheme.selectedBackground :\n                       (amCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         null\n                   \"\n                   [style.color]=\"\n                     (hour < 12) ?\n                       uiTheme.selectedText :\n                       (amCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         null\n                   \" themeHover #amCol>\n                <span>AM</span>\n              </div>\n            </div>\n            <div class=\"item\">\n              <div class=\"dp-btn\"\n                   (click)=\"toggleAmPm('PM')\"\n                   [class.selected]=\"hour >= 12\"\n                   [style.background-color]=\"\n                     (hour >= 12) ?\n                       uiTheme.selectedBackground :\n                       (pmCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         null\n                   \"\n                   [style.color]=\"\n                     (hour >= 12) ?\n                       uiTheme.selectedText :\n                       (pmCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         null\n                   \" themeHover #pmCol>\n                <span>PM</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <!-- End: time picker -->\n\n      <!-- Start: toolbox -->\n      <div class=\"the-toolbox horizontal-padding\">\n        <ng-container *ngIf=\"uiTodayBtnEnable\">\n          <div class=\"the-item dp-btn\"\n               [style.background-color]=\"today.classList.contains('hover') ? uiTheme.hoverBackground : null\"\n               [style.color]=\"today.classList.contains('hover') ? uiTheme.hoverText : null\"\n               (click)=\"selectToday()\" themeHover #today>\n            <span>{{ calendarIsGregorian ? 'Today' : '\u0627\u0645\u0631\u0648\u0632' }}</span>\n          </div>\n        </ng-container>\n      </div>\n      <!-- End: toolbox -->\n\n    </div>\n  </div>\n</div>\n", styles: [".datepicker-outer-container{vertical-align:top;min-width:200px;font-size:12px;padding-top:8px;padding-bottom:8px;-webkit-user-select:none;user-select:none;text-align:center;border-radius:5px;border-width:1px;border-style:solid}.datepicker-outer-container[dir=rtl] .datepicker-inner-container .navigation-container{flex-direction:row}.datepicker-outer-container[dir=ltr] .datepicker-inner-container .navigation-container{flex-direction:row-reverse}.datepicker-outer-container.hide{display:none}.datepicker-outer-container.manual-position{width:100%}.datepicker-outer-container .datepicker-inner-container .horizontal-padding{padding-right:5px;padding-left:5px}.datepicker-outer-container .datepicker-inner-container .no-margin-bottom{margin-bottom:0!important}.datepicker-outer-container .datepicker-inner-container .dp-btn{border-radius:5px}.datepicker-outer-container .datepicker-inner-container .content-container{margin-bottom:8px}.datepicker-outer-container .datepicker-inner-container .navigation-container{display:flex}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward,.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back{display:inline-block;vertical-align:top;height:24px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back{width:15%;position:relative}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward svg,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back svg{width:12px;height:12px;position:absolute;top:calc(50% - 6px);right:calc(50% - 6px)}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view{width:66%;margin:0 2%;font-weight:700}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view span{vertical-align:sub}.datepicker-outer-container .datepicker-inner-container .days-container .day-col{display:inline-block;vertical-align:top;width:14.2857142857%;padding:1px}.datepicker-outer-container .datepicker-inner-container .days-container .day-col .dp-btn{display:flex;flex-direction:column;justify-content:center;align-items:center;min-height:24px}.datepicker-outer-container .datepicker-inner-container .days-container .week-days .day-col{font-weight:700}.datepicker-outer-container .datepicker-inner-container .days-container .month-days .day-col{cursor:pointer}.datepicker-outer-container .datepicker-inner-container .three-col-per-row{display:inline-block;vertical-align:top;width:33.3333333333%;padding:1px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .three-col-per-row .dp-btn{display:flex;flex-direction:column;justify-content:center;align-content:center;min-height:36px}.datepicker-outer-container .datepicker-inner-container .time-container{border-top-width:1px;border-top-style:solid;border-bottom-width:1px;border-bottom-style:solid;height:82px;direction:ltr;display:flex;flex-direction:row;justify-content:center;align-content:center}.datepicker-outer-container .datepicker-inner-container .time-container .time-col{flex:1;height:100%;overflow:auto}.datepicker-outer-container .datepicker-inner-container .time-container .time-col:not(.meridian-col) .item:first-of-type{border-bottom-width:1px;border-bottom-style:solid;cursor:auto}.datepicker-outer-container .datepicker-inner-container .time-container .time-col:not(.meridian-col) .item:last-of-type{border-top-width:1px;border-top-style:solid;cursor:auto}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item{padding:1px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item:first-of-type{padding-top:3px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item:last-of-type{padding-bottom:3px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item .dp-btn{min-height:24px;display:flex;flex-direction:column;justify-content:center;align-content:center}.datepicker-outer-container .datepicker-inner-container .time-container .time-col.meridian-col{display:flex;flex-direction:column;justify-content:center}.datepicker-outer-container .datepicker-inner-container .the-toolbox{display:flex}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item{display:inline-block;vertical-align:top;min-width:40px;cursor:pointer;font-weight:700;padding:3px 5px;margin-left:5px;text-align:center}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item:last-child{margin-left:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: ThemeHoverDirective, selector: "[themeHover]" }, { kind: "pipe", type: i1.DecimalPipe, name: "number" }, { kind: "pipe", type: MonthPipe, name: "month" }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgPersianDatepickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-persian-datepicker', standalone: false, template: "<div class=\"datepicker-content\">\n  <ng-content />\n  <div class=\"datepicker-outer-container\"\n       [dir]=\"calendarIsGregorian ? 'ltr' : 'rtl'\"\n       [style.background-color]=\"uiTheme.background\"\n       [style.color]=\"uiTheme.text\"\n       [style.border-color]=\"uiTheme.border\"\n       [class.hide]=\"!uiIsVisible\">\n    <div class=\"datepicker-inner-container\">\n\n      <!-- Start: navigation -->\n      <div class=\"content-container navigation-container horizontal-padding\">\n        <div class=\"go-back dp-btn\"\n             [style.background-color]=\"goBack.classList.contains('hover') ? uiTheme.hoverBackground : null\"\n             (click)=\"navigate(false)\" themeHover #goBack>\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n               viewBox=\"0 0 240.823 240.823\"\n               [style.fill]=\"goBack.classList.contains('hover') ? uiTheme.hoverText : uiTheme.text\">\n            <path d=\"M183.189,111.816L74.892,3.555c-4.752-4.74-12.451-4.74-17.215,0c-4.752,4.74-4.752,12.439,0,17.179\n                   l99.707,99.671l-99.695,99.671c-4.752,4.74-4.752,12.439,0,17.191c4.752,4.74,12.463,4.74,17.215,0l108.297-108.261\n                   C187.881,124.315,187.881,116.495,183.189,111.816z\"></path>\n          </svg>\n        </div>\n        <div class=\"switch-view dp-btn\"\n             [style.background-color]=\"switchView.classList.contains('hover') ? uiTheme.hoverBackground : null\"\n             [style.color]=\"switchView.classList.contains('hover') ? uiTheme.hoverText : null\"\n             (click)=\"nextViewMode()\" themeHover #switchView>\n          <span>{{ viewDateTitle }}</span>\n        </div>\n        <div class=\"go-forward dp-btn\"\n             [style.background-color]=\"goForward.classList.contains('hover') ? uiTheme.hoverBackground : null\"\n             (click)=\"navigate(true)\" themeHover #goForward>\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n               viewBox=\"0 0 240.823 240.823\"\n               [style.fill]=\"goForward.classList.contains('hover') ? uiTheme.hoverText : uiTheme.text\">\n            <path d=\"M57.633,129.007L165.93,237.268c4.752,4.74,12.451,4.74,17.215,0c4.752-4.74,4.752-12.439,0-17.179\n                   l-99.707-99.671l99.695-99.671c4.752-4.74,4.752-12.439,0-17.191c-4.752-4.74-12.463-4.74-17.215,0L57.621,111.816\n                   C52.942,116.507,52.942,124.327,57.633,129.007z\"></path>\n          </svg>\n        </div>\n      </div>\n      <!-- End: navigation -->\n\n      <!-- Start: year view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'year'\"\n           class=\"years-container horizontal-padding\">\n        <div class=\"content-container\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <div class=\"year-col three-col-per-row\"\n               (click)=\"yearClick(year)\"\n               *ngFor=\"let year of years\">\n            <div class=\"dp-btn\"\n                 [class.disabled]=\"year.isYearDisabled\"\n                 [class.selected]=\"year.isYearOfSelectedDate\"\n                 [class.today]=\"year.isYearOfTodayDate\"\n                 [style.background-color]=\"\n                   (year.isYearDisabled) ?\n                     uiTheme.disabledBackground :\n                     (year.isYearOfSelectedDate) ?\n                       uiTheme.selectedBackground :\n                       (yearCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         (year.isYearOfTodayDate) ?\n                           uiTheme.todayBackground :\n                           null\n                 \"\n                 [style.color]=\"\n                   (year.isYearDisabled) ?\n                     uiTheme.disabledText :\n                     (year.isYearOfSelectedDate) ?\n                       uiTheme.selectedText :\n                       (yearCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         (year.isYearOfTodayDate) ?\n                           uiTheme.todayText :\n                           null\n                 \"\n                 themeHover #yearCol>\n              <span>{{ year.value }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: year view mode -->\n\n      <!-- Start: month view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'month'\"\n           class=\"months-container horizontal-padding\">\n        <div class=\"content-container\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <div class=\"month-col three-col-per-row\"\n               (click)=\"monthClick(month)\"\n               *ngFor=\"let month of months\">\n            <div class=\"dp-btn\"\n                 [class.disabled]=\"month.isMonthDisabled\"\n                 [class.selected]=\"month.isMonthOfSelectedDate\"\n                 [class.today]=\"month.isMonthOfTodayDate\"\n                 [style.background-color]=\"\n                   (month.isMonthDisabled) ?\n                     uiTheme.disabledBackground :\n                     (month.isMonthOfSelectedDate) ?\n                       uiTheme.selectedBackground :\n                       (monthCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         (month.isMonthOfTodayDate) ?\n                           uiTheme.todayBackground :\n                           null\n                 \"\n                 [style.color]=\"\n                   (month.isMonthDisabled) ?\n                     uiTheme.disabledText :\n                     (month.isMonthOfSelectedDate) ?\n                       uiTheme.selectedText :\n                       (monthCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         (month.isMonthOfTodayDate) ?\n                           uiTheme.todayText :\n                           null\n                 \"\n                 themeHover #monthCol>\n              <span>{{ month.indexValue | month: calendarIsGregorian }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End: month view mode -->\n\n      <!-- Start: day view mode -->\n      <div *ngIf=\"viewModes[viewModeIndex] === 'day'\"\n           class=\"days-container horizontal-padding\">\n        <div class=\"content-container week-days\">\n          <div class=\"day-col\"\n               *ngFor=\"let weekDay of weekDays\">\n            <span>{{ weekDay }}</span>\n          </div>\n        </div>\n        <div class=\"content-container month-days\"\n             [class.no-margin-bottom]=\"!timeEnable && !uiTodayBtnEnable\">\n          <ng-container *ngFor=\"let row of days\">\n            <div class=\"day-col\"\n                 (click)=\"dayClick(day)\"\n                 *ngFor=\"let day of row\">\n              <div class=\"dp-btn\"\n                   [class.disabled]=\"day.isDayDisabled\"\n                   [class.selected]=\"day.isDayOfSelectedDate\"\n                   [class.today]=\"day.isDayOfTodayDate\"\n                   [class.other-month]=\"!day.isDayInCurrentMonth\"\n                   [style.background-color]=\"\n                     (day.isDayDisabled) ?\n                       uiTheme.disabledBackground :\n                       (day.isDayOfSelectedDate) ?\n                         uiTheme.selectedBackground :\n                         (dayCol.classList.contains('hover')) ?\n                           uiTheme.hoverBackground :\n                           (day.isDayOfTodayDate) ?\n                             uiTheme.todayBackground :\n                             (!day.isDayInCurrentMonth) ?\n                               uiTheme.otherMonthBackground :\n                               null\n                   \"\n                   [style.color]=\"\n                     (day.isDayDisabled) ?\n                       uiTheme.disabledText :\n                       (day.isDayOfSelectedDate) ?\n                         uiTheme.selectedText :\n                         (dayCol.classList.contains('hover')) ?\n                           uiTheme.hoverText :\n                           (day.isDayOfTodayDate) ?\n                             uiTheme.todayText :\n                             (!day.isDayInCurrentMonth) ?\n                               uiTheme.otherMonthText :\n                               null\n                   \"\n                   themeHover #dayCol>\n                <span>{{ day.value }}</span>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <!-- End: day view mode -->\n\n      <!-- Start: time picker -->\n      <ng-container *ngIf=\"timeEnable\">\n        <div class=\"time-container horizontal-padding content-container\"\n             [style.border-top-color]=\"uiTheme.timeBorder\"\n             [style.border-bottom-color]=\"uiTheme.timeBorder\">\n          <div class=\"time-col hour-col\">\n            <div class=\"item\"\n                 [style.border-bottom-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ hour }}</span>\n              </div>\n            </div>\n            <ng-container *ngIf=\"!timeMeridian\">\n              <div class=\"item\"\n                   *ngFor=\"let _ of [].constructor(24); let i = index\">\n                <div class=\"dp-btn\"\n                     (click)=\"setHour(i)\"\n                     [class.selected]=\"hour === i\"\n                     [style.background-color]=\"\n                       (hour === i) ?\n                         uiTheme.selectedBackground :\n                         (hourCol.classList.contains('hover')) ?\n                           uiTheme.hoverBackground :\n                           null\n                     \"\n                     [style.color]=\"\n                       (hour === i) ?\n                         uiTheme.selectedText :\n                         (hourCol.classList.contains('hover')) ?\n                           uiTheme.hoverText :\n                           null\n                     \" themeHover #hourCol>\n                  <span>{{ i | number: '2.0' }}</span>\n                </div>\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"timeMeridian\">\n              <div class=\"item\"\n                   *ngFor=\"let _ of [].constructor(12); let i = index\">\n                <div class=\"dp-btn\"\n                     (click)=\"set12Hour(i + 1)\"\n                     [class.selected]=\"\n                       (hour === 0 && (i + 1) === 12) ||\n                       (hour >= 1 && hour <= 12 && hour === (i + 1)) ||\n                       (hour > 12 && hour === ((i + 1) + 12))\n                     \"\n                     [style.background-color]=\"\n                       (\n                         (hour === 0 && (i + 1) === 12) ||\n                         (hour >= 1 && hour <= 12 && hour === (i + 1)) ||\n                         (hour > 12 && hour === ((i + 1) + 12))\n                       ) ?\n                         uiTheme.selectedBackground :\n                         (hour12Col.classList.contains('hover')) ?\n                           uiTheme.hoverBackground :\n                           null\n                     \"\n                     [style.color]=\"\n                       (\n                         (hour === 0 && (i + 1) === 12) ||\n                         (hour >= 1 && hour <= 12 && hour === (i + 1)) ||\n                         (hour > 12 && hour === ((i + 1) + 12))\n                       ) ?\n                         uiTheme.selectedText :\n                         (hour12Col.classList.contains('hover')) ?\n                           uiTheme.hoverText :\n                           null\n                     \" themeHover #hour12Col>\n                  <span>{{ (i + 1) | number: '2.0' }}</span>\n                </div>\n              </div>\n            </ng-container>\n            <div class=\"item\"\n                 [style.border-top-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ hour }}</span>\n              </div>\n            </div>\n          </div>\n          <div class=\"time-col minute-col\">\n            <div class=\"item\"\n                 [style.border-bottom-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ minute }}</span>\n              </div>\n            </div>\n            <div class=\"item\"\n                 *ngFor=\"let _ of [].constructor(60); let i = index\">\n              <div class=\"dp-btn\"\n                   (click)=\"setMinute(i)\"\n                   [class.selected]=\"minute === i\"\n                   [style.background-color]=\"\n                     (minute === i) ?\n                       uiTheme.selectedBackground :\n                       (minuteCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         null\n                   \"\n                   [style.color]=\"\n                     (minute === i) ?\n                       uiTheme.selectedText :\n                       (minuteCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         null\n                   \" themeHover #minuteCol>\n                <span>{{ i | number: '2.0' }}</span>\n              </div>\n            </div>\n            <div class=\"item\"\n                 [style.border-top-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ minute }}</span>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"timeShowSecond\"\n               class=\"time-col second-col\">\n            <div class=\"item\"\n                 [style.border-bottom-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ second }}</span>\n              </div>\n            </div>\n            <div class=\"item\"\n                 *ngFor=\"let _ of [].constructor(60); let i = index\">\n              <div class=\"dp-btn\"\n                   (click)=\"setSecond(i)\"\n                   [class.selected]=\"second === i\"\n                   [style.background-color]=\"\n                     (second === i) ?\n                       uiTheme.selectedBackground :\n                       (secondCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         null\n                   \"\n                   [style.color]=\"\n                     (second === i) ?\n                       uiTheme.selectedText :\n                       (secondCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         null\n                   \" themeHover #secondCol>\n                <span>{{ i | number: '2.0' }}</span>\n              </div>\n            </div>\n            <div class=\"item\"\n                 [style.border-top-color]=\"uiTheme.border\">\n              <div class=\"dp-btn\">\n                <span>{{ second }}</span>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"timeMeridian\"\n               class=\"time-col meridian-col\">\n            <div class=\"item\">\n              <div class=\"dp-btn\"\n                   (click)=\"toggleAmPm('AM')\"\n                   [class.selected]=\"hour < 12\"\n                   [style.background-color]=\"\n                     (hour < 12) ?\n                       uiTheme.selectedBackground :\n                       (amCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         null\n                   \"\n                   [style.color]=\"\n                     (hour < 12) ?\n                       uiTheme.selectedText :\n                       (amCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         null\n                   \" themeHover #amCol>\n                <span>AM</span>\n              </div>\n            </div>\n            <div class=\"item\">\n              <div class=\"dp-btn\"\n                   (click)=\"toggleAmPm('PM')\"\n                   [class.selected]=\"hour >= 12\"\n                   [style.background-color]=\"\n                     (hour >= 12) ?\n                       uiTheme.selectedBackground :\n                       (pmCol.classList.contains('hover')) ?\n                         uiTheme.hoverBackground :\n                         null\n                   \"\n                   [style.color]=\"\n                     (hour >= 12) ?\n                       uiTheme.selectedText :\n                       (pmCol.classList.contains('hover')) ?\n                         uiTheme.hoverText :\n                         null\n                   \" themeHover #pmCol>\n                <span>PM</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <!-- End: time picker -->\n\n      <!-- Start: toolbox -->\n      <div class=\"the-toolbox horizontal-padding\">\n        <ng-container *ngIf=\"uiTodayBtnEnable\">\n          <div class=\"the-item dp-btn\"\n               [style.background-color]=\"today.classList.contains('hover') ? uiTheme.hoverBackground : null\"\n               [style.color]=\"today.classList.contains('hover') ? uiTheme.hoverText : null\"\n               (click)=\"selectToday()\" themeHover #today>\n            <span>{{ calendarIsGregorian ? 'Today' : '\u0627\u0645\u0631\u0648\u0632' }}</span>\n          </div>\n        </ng-container>\n      </div>\n      <!-- End: toolbox -->\n\n    </div>\n  </div>\n</div>\n", styles: [".datepicker-outer-container{vertical-align:top;min-width:200px;font-size:12px;padding-top:8px;padding-bottom:8px;-webkit-user-select:none;user-select:none;text-align:center;border-radius:5px;border-width:1px;border-style:solid}.datepicker-outer-container[dir=rtl] .datepicker-inner-container .navigation-container{flex-direction:row}.datepicker-outer-container[dir=ltr] .datepicker-inner-container .navigation-container{flex-direction:row-reverse}.datepicker-outer-container.hide{display:none}.datepicker-outer-container.manual-position{width:100%}.datepicker-outer-container .datepicker-inner-container .horizontal-padding{padding-right:5px;padding-left:5px}.datepicker-outer-container .datepicker-inner-container .no-margin-bottom{margin-bottom:0!important}.datepicker-outer-container .datepicker-inner-container .dp-btn{border-radius:5px}.datepicker-outer-container .datepicker-inner-container .content-container{margin-bottom:8px}.datepicker-outer-container .datepicker-inner-container .navigation-container{display:flex}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward,.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back{display:inline-block;vertical-align:top;height:24px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back{width:15%;position:relative}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward svg,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back svg{width:12px;height:12px;position:absolute;top:calc(50% - 6px);right:calc(50% - 6px)}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view{width:66%;margin:0 2%;font-weight:700}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view span{vertical-align:sub}.datepicker-outer-container .datepicker-inner-container .days-container .day-col{display:inline-block;vertical-align:top;width:14.2857142857%;padding:1px}.datepicker-outer-container .datepicker-inner-container .days-container .day-col .dp-btn{display:flex;flex-direction:column;justify-content:center;align-items:center;min-height:24px}.datepicker-outer-container .datepicker-inner-container .days-container .week-days .day-col{font-weight:700}.datepicker-outer-container .datepicker-inner-container .days-container .month-days .day-col{cursor:pointer}.datepicker-outer-container .datepicker-inner-container .three-col-per-row{display:inline-block;vertical-align:top;width:33.3333333333%;padding:1px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .three-col-per-row .dp-btn{display:flex;flex-direction:column;justify-content:center;align-content:center;min-height:36px}.datepicker-outer-container .datepicker-inner-container .time-container{border-top-width:1px;border-top-style:solid;border-bottom-width:1px;border-bottom-style:solid;height:82px;direction:ltr;display:flex;flex-direction:row;justify-content:center;align-content:center}.datepicker-outer-container .datepicker-inner-container .time-container .time-col{flex:1;height:100%;overflow:auto}.datepicker-outer-container .datepicker-inner-container .time-container .time-col:not(.meridian-col) .item:first-of-type{border-bottom-width:1px;border-bottom-style:solid;cursor:auto}.datepicker-outer-container .datepicker-inner-container .time-container .time-col:not(.meridian-col) .item:last-of-type{border-top-width:1px;border-top-style:solid;cursor:auto}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item{padding:1px;cursor:pointer}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item:first-of-type{padding-top:3px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item:last-of-type{padding-bottom:3px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col .item .dp-btn{min-height:24px;display:flex;flex-direction:column;justify-content:center;align-content:center}.datepicker-outer-container .datepicker-inner-container .time-container .time-col.meridian-col{display:flex;flex-direction:column;justify-content:center}.datepicker-outer-container .datepicker-inner-container .the-toolbox{display:flex}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item{display:inline-block;vertical-align:top;min-width:40px;cursor:pointer;font-weight:700;padding:3px 5px;margin-left:5px;text-align:center}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item:last-child{margin-left:0}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { _formControlDirective: [{
                type: ContentChild,
                args: [FormControlDirective, { static: false }]
            }], _formControlName: [{
                type: ContentChild,
                args: [FormControlName, { static: false }]
            }], _calendarIsGregorian: [{
                type: Input,
                args: ['calendarIsGregorian']
            }], inputDateValue: [{
                type: Input,
                args: ['dateValue']
            }], dateInitValue: [{
                type: Input
            }], dateIsGregorian: [{
                type: Input
            }], _dateFormat: [{
                type: Input,
                args: ['dateFormat']
            }], dateGregorianFormat: [{
                type: Input
            }], _dateMin: [{
                type: Input,
                args: ['dateMin']
            }], _dateMax: [{
                type: Input,
                args: ['dateMax']
            }], _timeEnable: [{
                type: Input,
                args: ['timeEnable']
            }], _timeShowSecond: [{
                type: Input,
                args: ['timeShowSecond']
            }], _timeMeridian: [{
                type: Input,
                args: ['timeMeridian']
            }], _uiTheme: [{
                type: Input,
                args: ['uiTheme']
            }], uiIsVisible: [{
                type: Input
            }], uiHideOnOutsideClick: [{
                type: Input
            }], uiHideAfterSelectDate: [{
                type: Input
            }], _uiYearView: [{
                type: Input,
                args: ['uiYearView']
            }], _uiMonthView: [{
                type: Input,
                args: ['uiMonthView']
            }], uiInitViewMode: [{
                type: Input
            }], uiTodayBtnEnable: [{
                type: Input
            }], dateOnInit: [{
                type: Output
            }], dateOnSelect: [{
                type: Output
            }], uiIsVisibleChange: [{
                type: Output
            }], onInsideClick: [{
                type: HostListener,
                args: ['click']
            }], onOutsideClick: [{
                type: HostListener,
                args: ['document:click']
            }] } });

class NgPersianDatepickerModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgPersianDatepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.0.0", ngImport: i0, type: NgPersianDatepickerModule, declarations: [NgPersianDatepickerComponent,
            ThemeHoverDirective,
            MonthPipe], imports: [CommonModule], exports: [NgPersianDatepickerComponent] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgPersianDatepickerModule, imports: [CommonModule] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgPersianDatepickerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        NgPersianDatepickerComponent,
                        ThemeHoverDirective,
                        MonthPipe,
                    ],
                    imports: [
                        CommonModule,
                    ],
                    exports: [
                        NgPersianDatepickerComponent,
                    ]
                }]
        }] });

/*
 * Public API Surface of ng-persian-datepicker
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgPersianDatepickerComponent, NgPersianDatepickerModule, defaultTheme };
//# sourceMappingURL=ng-persian-datepicker.mjs.map
