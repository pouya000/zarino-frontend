import { Jalali } from 'jalali-ts';
import { IActiveDate, IDay, IMonth, IYear, IDatepickerTheme } from './interface';
import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { FormControl, FormControlDirective, FormControlName } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class NgPersianDatepickerComponent implements OnInit, OnDestroy {
    private elementRef;
    constructor(elementRef: ElementRef<HTMLElement | null>);
    private input?;
    private inputEventFocusListener?;
    private formControl?;
    private formControlValueChanges?;
    private dateValue?;
    private lastEmittedDateValue?;
    private preventClose;
    private uiYearView;
    private uiMonthView;
    private today;
    private viewDate;
    private selectedDate?;
    private wasInsideClick;
    viewDateTitle: string;
    viewModes: string[];
    viewModeIndex: number;
    weekDays: string[];
    years: IYear[];
    months: IMonth[];
    days: IDay[][];
    hour: number;
    minute: number;
    second: number;
    /** @ReactiveForm */
    set _formControlDirective(value: FormControlDirective | undefined);
    set _formControlName(value: FormControlName | undefined);
    /** @Input */
    calendarIsGregorian: boolean;
    set _calendarIsGregorian(value: boolean);
    inputDateValue?: FormControl;
    dateInitValue: boolean;
    dateIsGregorian: boolean;
    dateFormat: string;
    set _dateFormat(value: string);
    dateGregorianFormat: string;
    dateMin: number | null;
    set _dateMin(value: number | null);
    dateMax: number | null;
    set _dateMax(value: number | null);
    timeEnable: boolean;
    set _timeEnable(value: boolean);
    timeShowSecond: boolean;
    set _timeShowSecond(value: boolean);
    timeMeridian: boolean;
    set _timeMeridian(value: boolean);
    uiTheme: IDatepickerTheme;
    set _uiTheme(value: Partial<IDatepickerTheme>);
    uiIsVisible: boolean;
    uiHideOnOutsideClick: boolean;
    uiHideAfterSelectDate: boolean;
    set _uiYearView(value: boolean);
    set _uiMonthView(value: boolean);
    uiInitViewMode: 'year' | 'month' | 'day';
    uiTodayBtnEnable: boolean;
    /** @Output */
    dateOnInit: EventEmitter<IActiveDate>;
    dateOnSelect: EventEmitter<IActiveDate>;
    uiIsVisibleChange: EventEmitter<boolean>;
    ngOnInit(): void;
    ngOnDestroy(): void;
    dateValueDefined(): boolean;
    setFormControl(value: FormControl | undefined): void;
    setToday(): void;
    setViewModes(): void;
    setInitViewMode(): void;
    checkViewModes(): void;
    setDateInitValue(dateValue: string | number | null | undefined): void;
    setSelectedDate(dateValue: string | number | null | undefined): void;
    setViewDate(): void;
    onChangeViewDate(): void;
    setYears(): void;
    setMonths(): void;
    setDays(): void;
    setViewDateTitle(): void;
    setTime(date?: Jalali | null): void;
    setFormControlValue(): void;
    setShowOnInputFocus(): void;
    skipViewDate(skip: number, type: number): void;
    navigate(forward: boolean): void;
    nextViewMode(): void;
    selectToday(): void;
    yearClick(year: IYear): void;
    monthClick(month: IMonth): void;
    dayClick(day: IDay): void;
    isYearOfTodayDate(year: number[]): boolean;
    isYearOfSelectedDate(year: number[]): boolean;
    isYearDisabled(month: number[]): boolean;
    isMonthOfToday(month: number[]): boolean;
    isMonthOfSelectedDate(month: number[]): boolean;
    isMonthDisabled(month: number[]): boolean;
    isDayInCurrentMonth(day: number[]): boolean;
    isDayOfTodayDate(day: number[]): boolean;
    isDayOfSelectedDate(day: number[]): boolean;
    isDayDisabled(day: number[]): boolean;
    isDateInRange(date: number, isYear: boolean, isMonth: boolean): boolean;
    changeSelectedDate(date: Jalali, setInputValue?: boolean): void;
    onChangeSelectedDate(setInputValue: boolean): void;
    set12Hour(value: number): void;
    setHour(value: number): void;
    setMinute(value: number): void;
    setSecond(value: number): void;
    toggleAmPm(current: 'AM' | 'PM'): void;
    onTimeChange(): void;
    onInsideClick(): void;
    onOutsideClick(): void;
    private valueOfDate;
    private setUiIsVisible;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgPersianDatepickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgPersianDatepickerComponent, "ng-persian-datepicker", never, { "_calendarIsGregorian": { "alias": "calendarIsGregorian"; "required": false; }; "inputDateValue": { "alias": "dateValue"; "required": false; }; "dateInitValue": { "alias": "dateInitValue"; "required": false; }; "dateIsGregorian": { "alias": "dateIsGregorian"; "required": false; }; "_dateFormat": { "alias": "dateFormat"; "required": false; }; "dateGregorianFormat": { "alias": "dateGregorianFormat"; "required": false; }; "_dateMin": { "alias": "dateMin"; "required": false; }; "_dateMax": { "alias": "dateMax"; "required": false; }; "_timeEnable": { "alias": "timeEnable"; "required": false; }; "_timeShowSecond": { "alias": "timeShowSecond"; "required": false; }; "_timeMeridian": { "alias": "timeMeridian"; "required": false; }; "_uiTheme": { "alias": "uiTheme"; "required": false; }; "uiIsVisible": { "alias": "uiIsVisible"; "required": false; }; "uiHideOnOutsideClick": { "alias": "uiHideOnOutsideClick"; "required": false; }; "uiHideAfterSelectDate": { "alias": "uiHideAfterSelectDate"; "required": false; }; "_uiYearView": { "alias": "uiYearView"; "required": false; }; "_uiMonthView": { "alias": "uiMonthView"; "required": false; }; "uiInitViewMode": { "alias": "uiInitViewMode"; "required": false; }; "uiTodayBtnEnable": { "alias": "uiTodayBtnEnable"; "required": false; }; }, { "dateOnInit": "dateOnInit"; "dateOnSelect": "dateOnSelect"; "uiIsVisibleChange": "uiIsVisibleChange"; }, ["_formControlDirective", "_formControlName"], ["*"], false, never>;
}
